
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  00000522  000005b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000522  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080017c  0080017c  00000632  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000632  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000012f  00000000  00000000  00000652  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000033e  00000000  00000000  00000781  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000118  00000000  00000000  00000abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d2  00000000  00000000  00000bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000011ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000132  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000122  00000000  00000000  000013fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e2       	ldi	r30, 0x22	; 34
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	ac 37       	cpi	r26, 0x7C	; 124
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	ac e7       	ldi	r26, 0x7C	; 124
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a2 38       	cpi	r26, 0x82	; 130
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 33 02 	call	0x466	; 0x466 <main>
  c2:	0c 94 8f 02 	jmp	0x51e	; 0x51e <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <dely_ns>:
dely_ns(250);
CLEARBIT(PORTUSED,BIT(2));
}

void dely_ns(unsigned char tim)
{
  ca:	20 91 7c 01 	lds	r18, 0x017C
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <dely_ns+0xc>
	for(j=0;j<tim;j++)
  d2:	9f 5f       	subi	r25, 0xFF	; 255
  d4:	2a e0       	ldi	r18, 0x0A	; 10
  d6:	98 17       	cp	r25, r24
  d8:	e0 f3       	brcs	.-8      	; 0xd2 <dely_ns+0x8>
  da:	20 93 7c 01 	sts	0x017C, r18
  de:	90 93 7d 01 	sts	0x017D, r25
	{
		for(k=0;k<10;k++)
		{};
	}
}
  e2:	08 95       	ret

000000e4 <toggleE>:
		
}

void toggleE(void)
{
SETBIT(PORTUSED,BIT(2));
  e4:	da 9a       	sbi	0x1b, 2	; 27
dely_ns(250);
  e6:	8a ef       	ldi	r24, 0xFA	; 250
  e8:	0e 94 65 00 	call	0xca	; 0xca <dely_ns>
CLEARBIT(PORTUSED,BIT(2));
  ec:	da 98       	cbi	0x1b, 2	; 27
}
  ee:	08 95       	ret

000000f0 <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	08 2f       	mov	r16, r24
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
  f6:	8b b3       	in	r24, 0x1b	; 27
  f8:	84 70       	andi	r24, 0x04	; 4
  fa:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=((cmd&0xF0));			
  fc:	80 2f       	mov	r24, r16
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	8b bb       	out	0x1b, r24	; 27
	toggleE();
 102:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
	PORTUSED=(((cmd&(0x0F))*16));	
 106:	10 e0       	ldi	r17, 0x00	; 0
 108:	0f 70       	andi	r16, 0x0F	; 15
 10a:	10 70       	andi	r17, 0x00	; 0
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	00 0f       	add	r16, r16
 110:	11 1f       	adc	r17, r17
 112:	8a 95       	dec	r24
 114:	e1 f7       	brne	.-8      	; 0x10e <lcd_cmd+0x1e>
 116:	0b bb       	out	0x1b, r16	; 27
	toggleE();
 118:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
}
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <lcd_putchar>:

void lcd_putchar(unsigned char sig)
{
 122:	1f 93       	push	r17
 124:	18 2f       	mov	r17, r24
		PORTUSED=0x01;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	8b bb       	out	0x1b, r24	; 27
		CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 12a:	8b b3       	in	r24, 0x1b	; 27
 12c:	82 70       	andi	r24, 0x02	; 2
 12e:	8b bb       	out	0x1b, r24	; 27
		PORTUSED=(sig&0xF0)|0x01;						
 130:	81 2f       	mov	r24, r17
 132:	80 7f       	andi	r24, 0xF0	; 240
 134:	81 60       	ori	r24, 0x01	; 1
 136:	8b bb       	out	0x1b, r24	; 27
		toggleE();
 138:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
		PORTUSED=((sig&(0x0F))*16)|0x01;
 13c:	12 95       	swap	r17
 13e:	10 7f       	andi	r17, 0xF0	; 240
 140:	11 60       	ori	r17, 0x01	; 1
 142:	1b bb       	out	0x1b, r17	; 27
		toggleE();
 144:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
}
 148:	1f 91       	pop	r17
 14a:	08 95       	ret

0000014c <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[32])
{
 14c:	ef 92       	push	r14
 14e:	ff 92       	push	r15
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTUSED=0x01;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	8b bb       	out	0x1b, r24	; 27
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 15c:	8b b3       	in	r24, 0x1b	; 27
 15e:	82 70       	andi	r24, 0x02	; 2
 160:	8b bb       	out	0x1b, r24	; 27
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	13 c0       	rjmp	.+38     	; 0x18c <lcd_string+0x40>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 166:	10 31       	cpi	r17, 0x10	; 16
 168:	19 f4       	brne	.+6      	; 0x170 <lcd_string+0x24>
				lcd_cmd(LINE2);
 16a:	80 ec       	ldi	r24, 0xC0	; 192
 16c:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
			PORTUSED=((str[k])&0xF0)|0x01;
 170:	88 81       	ld	r24, Y
 172:	80 7f       	andi	r24, 0xF0	; 240
 174:	81 60       	ori	r24, 0x01	; 1
 176:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 178:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
 17c:	88 81       	ld	r24, Y
 17e:	82 95       	swap	r24
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	81 60       	ori	r24, 0x01	; 1
 184:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 186:	0e 94 72 00 	call	0xe4	; 0xe4 <toggleE>
			k++;
 18a:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	PORTUSED=0x01;
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
 18c:	e7 01       	movw	r28, r14
 18e:	c1 0f       	add	r28, r17
 190:	d1 1d       	adc	r29, r1
 192:	88 81       	ld	r24, Y
 194:	88 23       	and	r24, r24
 196:	39 f7       	brne	.-50     	; 0x166 <lcd_string+0x1a>
			toggleE();
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
		}
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	08 95       	ret

000001a4 <lcd_gotoxy1>:
	lcd_char(O+48);
}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 1a4:	80 58       	subi	r24, 0x80	; 128
 1a6:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
}
 1aa:	08 95       	ret

000001ac <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 1ac:	80 54       	subi	r24, 0x40	; 64
 1ae:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
}
 1b2:	08 95       	ret

000001b4 <lcd_char>:
}

void lcd_char(unsigned char single)
{
	int i;
	if(single =='\t')
 1b4:	89 30       	cpi	r24, 0x09	; 9
 1b6:	21 f4       	brne	.+8      	; 0x1c0 <lcd_char+0xc>
	{
		for(i =0 ; i<2 ; i++)
		{	
		lcd_putchar(single);
 1b8:	0e 94 91 00 	call	0x122	; 0x122 <lcd_putchar>
 1bc:	89 e0       	ldi	r24, 0x09	; 9
 1be:	06 c0       	rjmp	.+12     	; 0x1cc <lcd_char+0x18>
		}
	}
	else if(single=='\n')
 1c0:	8a 30       	cpi	r24, 0x0A	; 10
 1c2:	21 f4       	brne	.+8      	; 0x1cc <lcd_char+0x18>
	{
		lcd_gotoxy2(0);	
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_gotoxy2>
 1ca:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 1cc:	0e 94 91 00 	call	0x122	; 0x122 <lcd_putchar>
 1d0:	08 95       	ret

000001d2 <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 1dc:	64 e6       	ldi	r22, 0x64	; 100
 1de:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__udivmodqi4>
 1e2:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	8c e9       	ldi	r24, 0x9C	; 156
 1ea:	9f ef       	ldi	r25, 0xFF	; 255
 1ec:	28 9f       	mul	r18, r24
 1ee:	70 01       	movw	r14, r0
 1f0:	29 9f       	mul	r18, r25
 1f2:	f0 0c       	add	r15, r0
 1f4:	38 9f       	mul	r19, r24
 1f6:	f0 0c       	add	r15, r0
 1f8:	11 24       	eor	r1, r1
 1fa:	c7 01       	movw	r24, r14
 1fc:	81 0f       	add	r24, r17
 1fe:	91 1d       	adc	r25, r1
 200:	6a e0       	ldi	r22, 0x0A	; 10
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__divmodhi4>
 208:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 20a:	84 2f       	mov	r24, r20
 20c:	80 5d       	subi	r24, 0xD0	; 208
 20e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_char>
	lcd_char(T+48);
 212:	80 2f       	mov	r24, r16
 214:	80 5d       	subi	r24, 0xD0	; 208
 216:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_char>
	lcd_char(O+48);
 21a:	10 5d       	subi	r17, 0xD0	; 208
 21c:	1e 0d       	add	r17, r14
 21e:	86 ef       	ldi	r24, 0xF6	; 246
 220:	9f ef       	ldi	r25, 0xFF	; 255
 222:	08 9f       	mul	r16, r24
 224:	00 2d       	mov	r16, r0
 226:	11 24       	eor	r1, r1
 228:	80 2f       	mov	r24, r16
 22a:	81 0f       	add	r24, r17
 22c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_char>
}
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	08 95       	ret

0000023a <lcd_exit>:
}
		

void lcd_exit(void)
{
	PORTUSED=save;
 23a:	80 91 7e 01 	lds	r24, 0x017E
 23e:	8b bb       	out	0x1b, r24	; 27
}
 240:	08 95       	ret

00000242 <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 242:	0a c0       	rjmp	.+20     	; 0x258 <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 248:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 24a:	2f 5f       	subi	r18, 0xFF	; 255
 24c:	3f 4f       	sbci	r19, 0xFF	; 255
 24e:	4c e0       	ldi	r20, 0x0C	; 12
 250:	2c 3c       	cpi	r18, 0xCC	; 204
 252:	34 07       	cpc	r19, r20
 254:	c9 f7       	brne	.-14     	; 0x248 <WaitMs+0x6>
 256:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 258:	00 97       	sbiw	r24, 0x00	; 0
 25a:	a1 f7       	brne	.-24     	; 0x244 <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 25c:	08 95       	ret

0000025e <lcd_init>:
void WaitMs(unsigned int ms);


void lcd_init(void)	//init the lcd
{	
	save=PORTUSED;
 25e:	8b b3       	in	r24, 0x1b	; 27
 260:	80 93 7e 01 	sts	0x017E, r24
	DDRUSED=0xFF;
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	8a bb       	out	0x1a, r24	; 26
	//DDRB=0xFF;
	WaitMs(15);
 268:	8f e0       	ldi	r24, 0x0F	; 15
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 21 01 	call	0x242	; 0x242 <WaitMs>
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
 270:	8b b3       	in	r24, 0x1b	; 27
 272:	84 70       	andi	r24, 0x04	; 4
 274:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=0x20;
 276:	80 e2       	ldi	r24, 0x20	; 32
 278:	8b bb       	out	0x1b, r24	; 27
	lcd_cmd(0x01);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(0x0F);
 280:	8f e0       	ldi	r24, 0x0F	; 15
 282:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(0x02);
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	lcd_cmd(LINE1);
 28c:	80 e8       	ldi	r24, 0x80	; 128
 28e:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_cmd>
	WaitMs(15);
 292:	8f e0       	ldi	r24, 0x0F	; 15
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 21 01 	call	0x242	; 0x242 <WaitMs>
		
}
 29a:	08 95       	ret

0000029c <accept_pass>:
	B0="8"
	B1="9"

  */
unsigned char accept_pass(void)
{
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	20 e0       	ldi	r18, 0x00	; 0
	while(i<3)
	{
		while((PINA==0xFF)&&((!(PINB & 0x03))==0));
		if(PINA==0xFE)
		{
			temp=(temp*10)+0;
 2a0:	3a e0       	ldi	r19, 0x0A	; 10
			temp=(temp*10)+1;
			while(!PINA);
		}
		if(PINA==0xFB)
		{
			temp=(temp*10)+2;
 2a2:	55 e0       	ldi	r21, 0x05	; 5
{
	unsigned char i=0,temp=0;
	
	while(i<3)
	{
		while((PINA==0xFF)&&((!(PINB & 0x03))==0));
 2a4:	89 b3       	in	r24, 0x19	; 25
 2a6:	8f 3f       	cpi	r24, 0xFF	; 255
 2a8:	31 f4       	brne	.+12     	; 0x2b6 <accept_pass+0x1a>
 2aa:	86 b3       	in	r24, 0x16	; 22
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	83 70       	andi	r24, 0x03	; 3
 2b0:	90 70       	andi	r25, 0x00	; 0
 2b2:	89 2b       	or	r24, r25
 2b4:	b9 f7       	brne	.-18     	; 0x2a4 <accept_pass+0x8>
		if(PINA==0xFE)
 2b6:	89 b3       	in	r24, 0x19	; 25
 2b8:	8e 3f       	cpi	r24, 0xFE	; 254
 2ba:	31 f4       	brne	.+12     	; 0x2c8 <accept_pass+0x2c>
		{
			temp=(temp*10)+0;
			while(!PINA);
 2bc:	89 b3       	in	r24, 0x19	; 25
 2be:	88 23       	and	r24, r24
 2c0:	e9 f3       	breq	.-6      	; 0x2bc <accept_pass+0x20>
	while(i<3)
	{
		while((PINA==0xFF)&&((!(PINB & 0x03))==0));
		if(PINA==0xFE)
		{
			temp=(temp*10)+0;
 2c2:	23 9f       	mul	r18, r19
 2c4:	20 2d       	mov	r18, r0
 2c6:	11 24       	eor	r1, r1
			while(!PINA);
		}
		if(PINA==0xFD)
 2c8:	89 b3       	in	r24, 0x19	; 25
 2ca:	8d 3f       	cpi	r24, 0xFD	; 253
 2cc:	39 f4       	brne	.+14     	; 0x2dc <accept_pass+0x40>
		{
			temp=(temp*10)+1;
			while(!PINA);
 2ce:	89 b3       	in	r24, 0x19	; 25
 2d0:	88 23       	and	r24, r24
 2d2:	e9 f3       	breq	.-6      	; 0x2ce <accept_pass+0x32>
			temp=(temp*10)+0;
			while(!PINA);
		}
		if(PINA==0xFD)
		{
			temp=(temp*10)+1;
 2d4:	23 9f       	mul	r18, r19
 2d6:	20 2d       	mov	r18, r0
 2d8:	11 24       	eor	r1, r1
 2da:	2f 5f       	subi	r18, 0xFF	; 255
			while(!PINA);
		}
		if(PINA==0xFB)
 2dc:	89 b3       	in	r24, 0x19	; 25
 2de:	8b 3f       	cpi	r24, 0xFB	; 251
 2e0:	49 f4       	brne	.+18     	; 0x2f4 <accept_pass+0x58>
		{
			temp=(temp*10)+2;
			while(!PINA);
 2e2:	89 b3       	in	r24, 0x19	; 25
 2e4:	88 23       	and	r24, r24
 2e6:	e9 f3       	breq	.-6      	; 0x2e2 <accept_pass+0x46>
			temp=(temp*10)+1;
			while(!PINA);
		}
		if(PINA==0xFB)
		{
			temp=(temp*10)+2;
 2e8:	25 9f       	mul	r18, r21
 2ea:	c0 01       	movw	r24, r0
 2ec:	11 24       	eor	r1, r1
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	28 2f       	mov	r18, r24
 2f2:	22 0f       	add	r18, r18
			while(!PINA);
		}
		if(PINA==0xF7)
 2f4:	89 b3       	in	r24, 0x19	; 25
 2f6:	87 3f       	cpi	r24, 0xF7	; 247
 2f8:	39 f4       	brne	.+14     	; 0x308 <accept_pass+0x6c>
		{
			temp=(temp*10)+3;
			while(!PINA);
 2fa:	89 b3       	in	r24, 0x19	; 25
 2fc:	88 23       	and	r24, r24
 2fe:	e9 f3       	breq	.-6      	; 0x2fa <accept_pass+0x5e>
			temp=(temp*10)+2;
			while(!PINA);
		}
		if(PINA==0xF7)
		{
			temp=(temp*10)+3;
 300:	23 9f       	mul	r18, r19
 302:	20 2d       	mov	r18, r0
 304:	11 24       	eor	r1, r1
 306:	2d 5f       	subi	r18, 0xFD	; 253
			while(!PINA);
		}
		if(PINA==0xEF)
 308:	89 b3       	in	r24, 0x19	; 25
 30a:	8f 3e       	cpi	r24, 0xEF	; 239
 30c:	39 f4       	brne	.+14     	; 0x31c <accept_pass+0x80>
		{
			temp=(temp*10)+4;
			while(!PINA);
 30e:	89 b3       	in	r24, 0x19	; 25
 310:	88 23       	and	r24, r24
 312:	e9 f3       	breq	.-6      	; 0x30e <accept_pass+0x72>
			temp=(temp*10)+3;
			while(!PINA);
		}
		if(PINA==0xEF)
		{
			temp=(temp*10)+4;
 314:	23 9f       	mul	r18, r19
 316:	20 2d       	mov	r18, r0
 318:	11 24       	eor	r1, r1
 31a:	2c 5f       	subi	r18, 0xFC	; 252
			while(!PINA);
		}
		if(PINA==0xDF)
 31c:	89 b3       	in	r24, 0x19	; 25
 31e:	8f 3d       	cpi	r24, 0xDF	; 223
 320:	39 f4       	brne	.+14     	; 0x330 <accept_pass+0x94>
		{
			temp=(temp*10)+5;
			while(!PINA);
 322:	89 b3       	in	r24, 0x19	; 25
 324:	88 23       	and	r24, r24
 326:	e9 f3       	breq	.-6      	; 0x322 <accept_pass+0x86>
			temp=(temp*10)+4;
			while(!PINA);
		}
		if(PINA==0xDF)
		{
			temp=(temp*10)+5;
 328:	23 9f       	mul	r18, r19
 32a:	20 2d       	mov	r18, r0
 32c:	11 24       	eor	r1, r1
 32e:	2b 5f       	subi	r18, 0xFB	; 251
			while(!PINA);
		}
		if(PINA==0xBF)
 330:	89 b3       	in	r24, 0x19	; 25
 332:	8f 3b       	cpi	r24, 0xBF	; 191
 334:	39 f4       	brne	.+14     	; 0x344 <accept_pass+0xa8>
		{
			temp=(temp*10)+6;
			while(!PINA);
 336:	89 b3       	in	r24, 0x19	; 25
 338:	88 23       	and	r24, r24
 33a:	e9 f3       	breq	.-6      	; 0x336 <accept_pass+0x9a>
			temp=(temp*10)+5;
			while(!PINA);
		}
		if(PINA==0xBF)
		{
			temp=(temp*10)+6;
 33c:	23 9f       	mul	r18, r19
 33e:	20 2d       	mov	r18, r0
 340:	11 24       	eor	r1, r1
 342:	2a 5f       	subi	r18, 0xFA	; 250
			while(!PINA);
		}
		if(PINA==0x7F)
 344:	89 b3       	in	r24, 0x19	; 25
 346:	8f 37       	cpi	r24, 0x7F	; 127
 348:	39 f4       	brne	.+14     	; 0x358 <accept_pass+0xbc>
		{
			temp=(temp*10)+7;
			while(!PINA);
 34a:	89 b3       	in	r24, 0x19	; 25
 34c:	88 23       	and	r24, r24
 34e:	e9 f3       	breq	.-6      	; 0x34a <accept_pass+0xae>
			temp=(temp*10)+6;
			while(!PINA);
		}
		if(PINA==0x7F)
		{
			temp=(temp*10)+7;
 350:	23 9f       	mul	r18, r19
 352:	20 2d       	mov	r18, r0
 354:	11 24       	eor	r1, r1
 356:	29 5f       	subi	r18, 0xF9	; 249
			while(!PINA);
		}
		if((PINB & 0x03)==0x02)
 358:	86 b3       	in	r24, 0x16	; 22
 35a:	83 70       	andi	r24, 0x03	; 3
 35c:	82 30       	cpi	r24, 0x02	; 2
 35e:	41 f4       	brne	.+16     	; 0x370 <accept_pass+0xd4>
		{
			temp=(temp*10)+8;
			while((PINB & 0x03)!=0x03);
 360:	86 b3       	in	r24, 0x16	; 22
 362:	83 70       	andi	r24, 0x03	; 3
 364:	83 30       	cpi	r24, 0x03	; 3
 366:	e1 f7       	brne	.-8      	; 0x360 <accept_pass+0xc4>
			temp=(temp*10)+7;
			while(!PINA);
		}
		if((PINB & 0x03)==0x02)
		{
			temp=(temp*10)+8;
 368:	23 9f       	mul	r18, r19
 36a:	20 2d       	mov	r18, r0
 36c:	11 24       	eor	r1, r1
 36e:	28 5f       	subi	r18, 0xF8	; 248
			while((PINB & 0x03)!=0x03);
		}
		if((PINB & 0x03)==0x01)
 370:	86 b3       	in	r24, 0x16	; 22
 372:	83 70       	andi	r24, 0x03	; 3
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	41 f4       	brne	.+16     	; 0x388 <accept_pass+0xec>
		{
			temp=(temp*10)+9;
			while((PINB & 0x03)!=0x03);
 378:	86 b3       	in	r24, 0x16	; 22
 37a:	83 70       	andi	r24, 0x03	; 3
 37c:	83 30       	cpi	r24, 0x03	; 3
 37e:	e1 f7       	brne	.-8      	; 0x378 <accept_pass+0xdc>
			temp=(temp*10)+8;
			while((PINB & 0x03)!=0x03);
		}
		if((PINB & 0x03)==0x01)
		{
			temp=(temp*10)+9;
 380:	23 9f       	mul	r18, r19
 382:	20 2d       	mov	r18, r0
 384:	11 24       	eor	r1, r1
 386:	27 5f       	subi	r18, 0xF7	; 247
			while((PINB & 0x03)!=0x03);
		}
		i++;
 388:	4f 5f       	subi	r20, 0xFF	; 255
  */
unsigned char accept_pass(void)
{
	unsigned char i=0,temp=0;
	
	while(i<3)
 38a:	43 30       	cpi	r20, 0x03	; 3
 38c:	08 f4       	brcc	.+2      	; 0x390 <accept_pass+0xf4>
 38e:	8a cf       	rjmp	.-236    	; 0x2a4 <accept_pass+0x8>
			while((PINB & 0x03)!=0x03);
		}
		i++;
	}
	return(temp);
 390:	82 2f       	mov	r24, r18
 392:	08 95       	ret

00000394 <display>:

#include "accept_pass.h"	//Accepts passWord from user and return a unsigned double char value
void display(void)
{
	lcd_init();
 394:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_init>
	
	lcd_gotoxy1(0);
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy1>

	lcd_string("Enter PassWord");
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_string>
	
	if(accept_pass()==password)				// Ask for PassWord for authorised access to data...
 3a6:	0e 94 4e 01 	call	0x29c	; 0x29c <accept_pass>
 3aa:	90 91 7f 01 	lds	r25, 0x017F
 3ae:	89 17       	cp	r24, r25
 3b0:	49 f4       	brne	.+18     	; 0x3c4 <display+0x30>
	{
		lcd_showvalue(count2);
 3b2:	80 91 80 01 	lds	r24, 0x0180
 3b6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_showvalue>
		lcd_showvalue(count);
 3ba:	80 91 81 01 	lds	r24, 0x0181
 3be:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_showvalue>
 3c2:	08 95       	ret
	}
	else
	{
			
		lcd_gotoxy1(0);
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy1>
			
		lcd_string("Wrong PassWord");
 3ca:	8f e0       	ldi	r24, 0x0F	; 15
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_string>
 3d2:	08 95       	ret

000003d4 <reset>:
#include "display.h"

void reset(void)
{
	lcd_init();
 3d4:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_init>
	
	lcd_gotoxy1(0);
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy1>

	lcd_string("Enter PassWord");
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_string>
	
	if(accept_pass()==password)					//Checks password for secured pass to stored data
 3e6:	0e 94 4e 01 	call	0x29c	; 0x29c <accept_pass>
 3ea:	90 91 7f 01 	lds	r25, 0x017F
 3ee:	89 17       	cp	r24, r25
 3f0:	51 f4       	brne	.+20     	; 0x406 <reset+0x32>
	{
		count=0;
 3f2:	10 92 81 01 	sts	0x0181, r1
		count2=0;
 3f6:	10 92 80 01 	sts	0x0180, r1
		
		lcd_gotoxy1(0);
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy1>

		lcd_string("Counter reseted");
 400:	8e e1       	ldi	r24, 0x1E	; 30
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	05 c0       	rjmp	.+10     	; 0x410 <reset+0x3c>

	}
	else
	{
		
		lcd_gotoxy1(0);
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy1>

		lcd_string("Wrong PassWord");
 40c:	8f e0       	ldi	r24, 0x0F	; 15
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_string>
 414:	08 95       	ret

00000416 <change_pass>:
// Function for Chanding PassWord....
void change_pass(void)
{
	

	lcd_init();
 416:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_init>
	
	lcd_gotoxy1(0);
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy1>

	lcd_string("Enter Old password:"); // Ask for old password so authoruzed person can cahange the PassWord
 420:	8e e2       	ldi	r24, 0x2E	; 46
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_string>
	


	if(accept_pass()==password)
 428:	0e 94 4e 01 	call	0x29c	; 0x29c <accept_pass>
 42c:	90 91 7f 01 	lds	r25, 0x017F
 430:	89 17       	cp	r24, r25
 432:	89 f4       	brne	.+34     	; 0x456 <change_pass+0x40>
	{
		lcd_gotoxy1(0);
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy1>

		lcd_string("Enter New password:");
 43a:	82 e4       	ldi	r24, 0x42	; 66
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_string>

		
		password=accept_pass();					//Accept new PassWord...
 442:	0e 94 4e 01 	call	0x29c	; 0x29c <accept_pass>
 446:	80 93 7f 01 	sts	0x017F, r24

		
		lcd_gotoxy1(0);
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy1>

		lcd_string("New Password Set!!!");
 450:	86 e5       	ldi	r24, 0x56	; 86
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	05 c0       	rjmp	.+10     	; 0x460 <change_pass+0x4a>
		return;
		
	}
	else
	{
		lcd_gotoxy1(0);
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy1>

		lcd_string("Wrong password!!!");
 45c:	8a e6       	ldi	r24, 0x6A	; 106
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_string>
 464:	08 95       	ret

00000466 <main>:
*/


int main(void)
{
	count=0;			//Initalization of count and password count and password get reseted after Power cut of.....
 466:	10 92 81 01 	sts	0x0181, r1
	count2=0;
 46a:	10 92 80 01 	sts	0x0180, r1
	password=0;
 46e:	10 92 7f 01 	sts	0x017F, r1
	DDRA=0x00;			//PORT A input
 472:	1a ba       	out	0x1a, r1	; 26
	DDRB=0xC0;			//PORT B B0 to B5 Input B6 n B7 Output
 474:	80 ec       	ldi	r24, 0xC0	; 192
 476:	87 bb       	out	0x17, r24	; 23
	PORTB=(PORTB|0xFF);	//Pullup register   and  B6 n B7 contineously ON as B6 is LASER and B7 connected to indcator led
 478:	88 b3       	in	r24, 0x18	; 24
 47a:	8f ef       	ldi	r24, 0xFF	; 255
 47c:	88 bb       	out	0x18, r24	; 24
	PORTA=(PORTA|0xFF);	//pullup register
 47e:	9b b3       	in	r25, 0x1b	; 27
 480:	8b bb       	out	0x1b, r24	; 27
 482:	0e c0       	rjmp	.+28     	; 0x4a0 <main+0x3a>
	
	while(PINB & 0x20)							//until the diode pin 
	{
		if((PINB & 0x04)==0)					//if B2 is grounded calls reset operation
 484:	b2 99       	sbic	0x16, 2	; 22
 486:	03 c0       	rjmp	.+6      	; 0x48e <main+0x28>
			reset();
 488:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <reset>
 48c:	09 c0       	rjmp	.+18     	; 0x4a0 <main+0x3a>
		else
			if((PINB & 0x08)==0)
 48e:	b3 99       	sbic	0x16, 3	; 22
 490:	03 c0       	rjmp	.+6      	; 0x498 <main+0x32>
				display();						//if B3 is grounded calls display operation
 492:	0e 94 ca 01 	call	0x394	; 0x394 <display>
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <main+0x3a>
			else
				if((PINB & 0x10)==0)
 498:	b4 99       	sbic	0x16, 4	; 22
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <main+0x3a>
					change_pass();				//if B4 is grounded calls change_pass operation
 49c:	0e 94 0b 02 	call	0x416	; 0x416 <change_pass>
	DDRA=0x00;			//PORT A input
	DDRB=0xC0;			//PORT B B0 to B5 Input B6 n B7 Output
	PORTB=(PORTB|0xFF);	//Pullup register   and  B6 n B7 contineously ON as B6 is LASER and B7 connected to indcator led
	PORTA=(PORTA|0xFF);	//pullup register
	
	while(PINB & 0x20)							//until the diode pin 
 4a0:	b5 99       	sbic	0x16, 5	; 22
 4a2:	f0 cf       	rjmp	.-32     	; 0x484 <main+0x1e>
				display();						//if B3 is grounded calls display operation
			else
				if((PINB & 0x10)==0)
					change_pass();				//if B4 is grounded calls change_pass operation
	}
	count++;
 4a4:	80 91 81 01 	lds	r24, 0x0181
 4a8:	8f 5f       	subi	r24, 0xFF	; 255
 4aa:	80 93 81 01 	sts	0x0181, r24
		{
			count=0;
			count2++;
		}
	}
	while((PINB & 0x20)==0);		// Wait till diode input pin changes its status.....
 4ae:	b5 9b       	sbis	0x16, 5	; 22
 4b0:	fe cf       	rjmp	.-4      	; 0x4ae <main+0x48>


 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	08 95       	ret

000004b8 <__udivmodqi4>:
 4b8:	99 1b       	sub	r25, r25
 4ba:	79 e0       	ldi	r23, 0x09	; 9
 4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__udivmodqi4_ep>

000004be <__udivmodqi4_loop>:
 4be:	99 1f       	adc	r25, r25
 4c0:	96 17       	cp	r25, r22
 4c2:	08 f0       	brcs	.+2      	; 0x4c6 <__udivmodqi4_ep>
 4c4:	96 1b       	sub	r25, r22

000004c6 <__udivmodqi4_ep>:
 4c6:	88 1f       	adc	r24, r24
 4c8:	7a 95       	dec	r23
 4ca:	c9 f7       	brne	.-14     	; 0x4be <__udivmodqi4_loop>
 4cc:	80 95       	com	r24
 4ce:	08 95       	ret

000004d0 <__divmodhi4>:
 4d0:	97 fb       	bst	r25, 7
 4d2:	09 2e       	mov	r0, r25
 4d4:	07 26       	eor	r0, r23
 4d6:	0a d0       	rcall	.+20     	; 0x4ec <__divmodhi4_neg1>
 4d8:	77 fd       	sbrc	r23, 7
 4da:	04 d0       	rcall	.+8      	; 0x4e4 <__divmodhi4_neg2>
 4dc:	0c d0       	rcall	.+24     	; 0x4f6 <__udivmodhi4>
 4de:	06 d0       	rcall	.+12     	; 0x4ec <__divmodhi4_neg1>
 4e0:	00 20       	and	r0, r0
 4e2:	1a f4       	brpl	.+6      	; 0x4ea <__divmodhi4_exit>

000004e4 <__divmodhi4_neg2>:
 4e4:	70 95       	com	r23
 4e6:	61 95       	neg	r22
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255

000004ea <__divmodhi4_exit>:
 4ea:	08 95       	ret

000004ec <__divmodhi4_neg1>:
 4ec:	f6 f7       	brtc	.-4      	; 0x4ea <__divmodhi4_exit>
 4ee:	90 95       	com	r25
 4f0:	81 95       	neg	r24
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	08 95       	ret

000004f6 <__udivmodhi4>:
 4f6:	aa 1b       	sub	r26, r26
 4f8:	bb 1b       	sub	r27, r27
 4fa:	51 e1       	ldi	r21, 0x11	; 17
 4fc:	07 c0       	rjmp	.+14     	; 0x50c <__udivmodhi4_ep>

000004fe <__udivmodhi4_loop>:
 4fe:	aa 1f       	adc	r26, r26
 500:	bb 1f       	adc	r27, r27
 502:	a6 17       	cp	r26, r22
 504:	b7 07       	cpc	r27, r23
 506:	10 f0       	brcs	.+4      	; 0x50c <__udivmodhi4_ep>
 508:	a6 1b       	sub	r26, r22
 50a:	b7 0b       	sbc	r27, r23

0000050c <__udivmodhi4_ep>:
 50c:	88 1f       	adc	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	5a 95       	dec	r21
 512:	a9 f7       	brne	.-22     	; 0x4fe <__udivmodhi4_loop>
 514:	80 95       	com	r24
 516:	90 95       	com	r25
 518:	bc 01       	movw	r22, r24
 51a:	cd 01       	movw	r24, r26
 51c:	08 95       	ret

0000051e <_exit>:
 51e:	f8 94       	cli

00000520 <__stop_program>:
 520:	ff cf       	rjmp	.-2      	; 0x520 <__stop_program>
